# strings
'string1'
"string2"   # Разницы между одинарной или двойной кавычкой нет
'''multiline
string'''
"""multiline
string"""   # многострочные

'abc' + 'cde'   # конкатенация
'abc'*3     # повторение
len('abc')  # длина строки

# сравнения строк в лексикографическом порядке
'abc' == "abc"
'abc' < 'ac'
'abc' > 'ab'

'\n'    # перевод строки
print('String', 'Another string')       # по умолчанию соединяет строки по пробелу
print('First line', '\n\n\n', 'Last line')  # вставит 3 перевода строки между линиями
print('First line', end=" ")    # end - это символ после принта, по-умолчанию \n

# строки
genome = 'ATGC'
genome[0]   # A
genome[-1]  # C
genome[1] = 'c' # ошибка - строки неизменяемы

# for можно использовать для перебора символов строки
for c in genome:
    print(c)

# количество вхождений подстроки
genome.count('c')   # рассматриваются неперекрывающиеся последовательности


s = 'aTbgdaDCGcc'
p = 'cc'
s.upper()   # к верхнему регистру
s.lower()   # к нижнему регистру
s.count(p)  # количество вхождений
s.find(p)   # где встречается в первый раз
s.find('u') # -1 - нигде не встречается
# для проверки вхождения подстроки лучше использовать if i in string

s.replace('a', 'A') # заменяет ВСЕ вхождения первого символа на второй
s.upper().count('gt'.upper())   # последовательный вызов команд

# все эти операции не изменяют строку
# для изменения строки необходимо сделать присвоение

# slicing
dna = 'ATGGCCTAGCGCTA'
dna[1]      # T
dna[1:4]    # TGG с первого по четвертый, не включая четвертый
dna[:4]     # ATGG с нуля до четвертого
dna[4:]     # CCTAGCGCTA с четвертого до конца
dna[-4:]    # GCTA с четвертого от конца до конца
dna[1:-1]   # TGGCCTAGCGCT от первого до предпоследнего
dna[1:-1:2] # от первого до предпоследнего с шагом 2
dna[::-1]   # все символы в обратном порядке
