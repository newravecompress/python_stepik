"""
Напишите функцию, которая для заданного натурального числа n генерирует последовательность чисел, 
описанную в гипотезе Коллатца:

Если n четное, то делим его пополам, если нечётное, то умножаем на 3 и прибавляем 1. 
С итогом вычисления снова проделываем эту операцию до тех пор, пока в результате не будет получено число 1.

Например, для числа n = 17 последовательность вычислений выглядит следующим образом:
17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1

Предполагается, что подобная последовательность остановится на числе 1 
для любого начального натурального числа n. 

Формат ввода:
Строка, содержащая единственное целое число n, n>0.

Формат вывода:
Строка, содержащая последовательность целых чисел, разделённых пробелом.

Sample Input 1:
17

Sample Output 1:
17 52 26 13 40 20 10 5 16 8 4 2 1

Sample Input 2:
1

Sample Output 2:
1
"""

num = int(input())


def conjecture(number):
    print(int(number), end=' ')
    if number == 1:
        return
    else:
        if number % 2 == 0:
            number = number / 2
        else:
            number = number * 3 + 1
        conjecture(number)


conjecture(num)

# Другой вариант без рекурсии
a = int(input())
while a != 1:
    print(a, end=' ')
    if a % 2 == 0:
        a = a // 2
    else:
        a = a * 3 + 1
print(a)


'''
Улучшения:

1. Реализуйте отдельную функцию, которая принимает число на вход и возвращает генерируемую по этому числу 
последовательность значений:

def three_n_plus_one(n):
    ...

print(three_n_plus_one(5))   # [5, 16, 8, 4, 2, 1]
print(three_n_plus_one(1))   # [1]

2. Реализуйте указанную выше функцию в виде генератора:

print(three_n_plus_one(5))  # <generator object three_n_plus_one at 0xXX...>
print(list(three_n_plus_one(5)))  # [5, 16, 8, 4, 2, 1]
print(list(three_n_plus_one(1)))  # [1]

3. Попробуйте поисследовать эти последовательности: 
определите, чему равны максимальные числа в этих последовательностях для первой тысячи натуральных чисел;
определите среднюю длину полученных последовательностей и постройте распределение частот длин;
попробуйте увидеть какие-нибудь ещё интересные моменты в этих числах, не останавливайтесь на достигнутом!
'''
