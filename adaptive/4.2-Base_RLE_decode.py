"""
Кодирование длин серий — это базовый алгоритм сжатия данных.

В этой задаче мы реализуем алгоритм дешифровки строк, закодированных с помощью одного из самых простых  
вариантов кодирования длин серий.

На вход алгоритму подаётся строка, содержащая цифры и символы латинского алфавита. 
Эта строка разбивается на так называемые "серии", которые кодируются парой число-символ или просто символ 
(в таком случае число считается равным единице). 
Результат должен содержать эти серии в том же порядке, что они и встречаются в исходной строке, 
при этом каждая серия раскрывается в последовательность символов соответствующей длины. 

Например, рассмотрим строку 
3ab4c2CaB

Разобъём её на серии
3a b 4c 2C a B

После чего преобразуем серии и получим исходную закодированную строку:
aaabccccCCaB

Формат ввода:
Одна строка, содержащая закодированную последовательность.

Формат вывода:
Строка, содержащая раскодированную последовательность.

Sample Input:
3ab4c2CaB

Sample Output:
aaabccccCCaB
"""
# TODO: доделать задачу!

str = '3ab4c2CaB'
# str = input()
final_str = ''
cur_char = str[0]
cnt_char = "0"

for char in str:
    if char.isdigit():
        final_str += cur_char * int(cnt_char)
        cur_char = char
        cnt_char = "0"
    else:
        cnt_char += char

final_str += cur_char * int(cnt_char)

print(final_str)


'''
Улучшения:

1. Вынесите часть решения, отвечающую за определение закодированных серий в отдельную функцию, 
которая принимает строку на вход, а возвращает последовательность пар (длина серии, символ)

def split_decode_series(string):
    ...

print(split_decode_series('2a3bB'))   # [(2, 'a'), (3, 'b'), (1, 'B')]
print(split_decode_series('a'))       # [(1, 'a')]
2. Реализуйте эту функцию в виде генератора, чтобы избавиться от создания лишнего списка:

print(split_decode_series('2a3bB'))  # <generator object split_decode_series at 0xXX...>
print(list(split_decode_series('2a3bB')))  # [(2, 'a'), (3, 'b'), (1, 'B')]
print(list(split_decode_series('a')))      # [(1, 'a')]
3. Вынесите часть решения, отвечающую за получение закодированной строки в отдельную функцию, 
которая принимает на вход последовательность серий, а возвращает закодированную строку:

def decode_series(series):
    ...


series = split_decode_series('2a3bB')
print(decode_series(series))           # aabbbB
4. Создайте функцию, которая принимает на вход строку и, используя определённые выше функции, 
возвращает исходную строку закодированную длинами серий.

def rle_decode(string):
    ...

print(rle_decode('2a3bB'))  # aabbbB
'''
