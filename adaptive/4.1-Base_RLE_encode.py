"""
Кодирование длин серий — это базовый алгоритм сжатия данных.

В этой задаче мы реализуем одну из самых простых его вариантов.

На вход алгоритму подаётся строка, содержащая символы латинского алфавита. 
Эта строка разбивается на группы одинаковых символов, идущих подряд ("серии"). 
Каждая серия характеризуется повторяющимся символом и количеством повторений. 
Именно эта информация и записывается в код: сначала пишется длина серии повторяющихся символов, затем сам символ. 
У серий длиной в один символ количество повторений будем опускать.

Например, рассмотрим строку
aaabccccCCaB

Разобъём её на серии
aaa b cccc CC a B

После чего закодируем серии и получим итоговую строку, которую и будем считать результатом работы алгоритма.
3ab4c2CaB

Формат ввода:
Одна строка, содержащая произвольные символы латинского алфавита.

Формат вывода:
Строка, содержащая закодированную последовательность.

Sample Input 1:
aaabccccCCaB

Sample Output 1:
3ab4c2CaB

Sample Input 2:
a

Sample Output 2:
a
"""

# from itertools import groupby
# text = input()
# output = ''
#
# groups = [list(g) for k, g in groupby(text)]
#
# for group in groups:
#     group_len = len(group)
#     if group_len > 1:
#         output += str(group_len)
#     output += group[0]
#
# print(output)


# Другой вариант:
from itertools import groupby
for c, seq in groupby(input()):
    n = len(list(seq))
    print('{0}{1}'.format(str(n) * (n > 1), c), end='')


'''
Улучшения:

1. Вынесите часть решения, отвечающую за определение серий и их длин в отдельную функцию, 
которая принимает строку на вход, а возвращает список пар (длина серии, символ):

def split_encode_series(string):
    ...

print(split_encode_series('aabbbB'))   # [(2, 'a'), (3, 'b'), (1, 'B')]
print(split_encode_series('a'))        # [(1, 'a')]


2. Реализуйте эту функцию в виде генератора, чтобы избавиться от создания лишнего списка:

print(split_encode_series('aabbbB'))  # <generator object split_encode_series at 0xXX...>
print(list(split_encode_series('aabbbB')))  # [(2, 'a'), (3, 'b'), (1, 'B')]
print(list(split_encode_series('a')))       # [(1, 'a')]


3. Вынесите часть решения, отвечающую за получение закодированной строки в отдельную функцию, 
которая принимает на вход последовательность серий, а возвращает закодированную строку:

def encode_series(series):
    ...

series = split_encode_series('aabbbB')
print(encode_series(series))            # 2a3bB


4. Создайте функцию, которая принимает на вход строку и, используя определённые выше функции, 
возвращает исходную строку закодированную длинами серий.

def rle_encode(string):
    ...

print(rle_encode('aabbbB'))  # 2a3bB
'''
